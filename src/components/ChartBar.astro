---
import Caption from "./Caption.astro";
const { title, notes, type, values } = Astro.props;

function addNumberPercentToValues(values) {
  // Ensure values is always a valid array
  if (!values || !Array.isArray(values) || values.length === 0) {
    return [];
  }
  
  const numbers = values.map(value => value.number)
  const largest = Math.max(...numbers);

  return values.map((value) => {
    return {
      ...value,
      number: type === 'proportion' ? value.number + '%' : value.number,
      numberPercent: value.number / largest * 100
    }
  });
}

const chartValues = addNumberPercentToValues(values);

---

<div class:list={["chart-bar reveal--fadeInUp", type && `chart-bar--${type}`]}>
  <div class="chart-bar__holder">

    <span class="chart-bar__title">{title}</span>
  
    <div class="chart-bar__values">
      <div class="chart-bar__bars">
        {
          chartValues &&
            chartValues.map((data, index) => (
              //valores:
              //data.color
              //data.number
              //data.numberPercent
              //data.label
              <div
                class="chart-bar__item"
                style={`--clr-chart:${data.color}; --data-perc:${data.numberPercent}%; --index:${index};`}
              >
                <span class="chart-bar__label">{data.label}</span>
                <div class="chart-bar__bar">
                  <span class="chart-bar__number">{data.number}</span>
                </div>
              </div>
            ))
        }
      </div>
      <div class="chart-bar__ghost-values">
        {
          chartValues &&
            chartValues.map((data) => (
              <span class="chart-bar__number">{data.number}</span>
            ))
        }
      </div>
    </div>
  
    <div class="chart-bar__notes">
      <Caption>{notes}</Caption>
    </div>
  </div>
</div>

<style lang="scss">
  @use "../assets/styles/config/config" as *;
  @use "../assets/styles/globals/grrr" as *;

  :global(.animation-disabled:has(.chart-bar) + *) {
    margin-top: var(--mt-m);
  }

  .chart-bar {
    $self: &;
    overflow: hidden;
    
    &:not(:first-child),
    & :global(+ *:not(.column)),
    :global(.animation-disabled:not(:first-child) > ) & {
      margin-top: var(--mt-m);
    }
    
    :global(.group__content >) &,
    :global(.group__content > .animation-disabled >) & {
      @extend %grrr--board;
    }

    &__holder {
      :global(.group__content > .chart-bar) &,
      :global(.group__content > .animation-disabled > .chart-bar) & {
        grid-column: content;
      }
    }

    &__title {
      @include type("h-m");
      display: block;
      margin-bottom: 40px;

      :global(.columns--33-66 .columns__column-1) &,
      :global(.columns--66-33 .columns__column-2) & {
        @include type("h-xs");
      }
    }

    &__values {
      display: flex;
    }

    &__number {
      @include type("h-xs");
      display: block;
      position: absolute;
      top: 50%;
      left: var(--data-perc);
      transform: translate(0, -50%);
      opacity: 0;
      transition: 1s ease calc(.3s * (var(--index) + 1));

      #{$self}--proportion & {
        width: 4ch;
        text-align: right;
        left: 100%;
      }
      :global(.animation-disabled) &,
      #{$self}.reveal & {
        opacity: 1;
        transform: translate(10px, -50%);
      }
    }

    &__bars {
      flex: 1;
      padding-right: 10px;
    }

    &__ghost-values {
      opacity: 0;
      visibility: hidden;
      pointer-events: none;

      > span {
        position: static;
      }
    }

    &__item {
      + .chart-bar__item {
        margin-top: 24px;
      }
    }

    &__label {
      @include type("h-xs");
      font-weight: 400;
      display: block;
      margin-bottom: 10px;

      :global(.columns--33-66 .columns__column-1) &,
      :global(.columns--66-33 .columns__column-2) & {
        @include type("c-m");
      }
    }

    &__bar {
      width: 100%;
      height: 20px;
      position: relative;

      &::after {
        content: "";
        width: 0;
        height: 100%;
        display: block;
        background-color: var(--clr-chart, #000);
        position: absolute;
        top: 0;
        left: 0;
        transition: 1s ease-in calc(1s * (var(--index) * .2));
      }

      #{$self}--proportion & {
        &::before {
          content: "";
          width: 100%;
          height: 100%;
          display: block;
          background-color: color-mix(
            in srgb,
            var(--clr-chart, #000) 60%,
            #ffffff 40%
          );
          position: absolute;
          top: 0;
          left: 0;
        }
      }

      :global(.animation-disabled) &::after,
      #{$self}.reveal &::after {
        width: var(--data-perc);
      }
    }

    &__notes {
      margin-top: 40px;
      display: block;
    }

  }
  
</style>
