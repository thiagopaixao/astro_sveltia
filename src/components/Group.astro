---
//overlay deve ser: dark ou none

const { imgBg, videoBg, txtColor, bgColor, overlay } = Astro.props;

// imgBg e videoBg recebem a url direta (deve ser poss√≠vel apenas um dos dois)
// overlay recebe booleano

const imgBgVar = imgBg && `url(${imgBg})`;
---

<section
  class:list={[
    "group",
    `group--overlay-${overlay}`,
    imgBg && `group--has-bg-image`,
  ]}
>
  {
    (imgBg || videoBg) && (
      <div class="group__bg">
        {videoBg && (
          <video autoplay muted loop>
            <source src={videoBg} />
          </video>
        )}
      </div>
    )
  }
  <div class="group__content">
    <slot />
  </div>
</section>

<style lang="scss" define:vars={{ "clr-txt": txtColor, "clr-bg": bgColor, "img-bg": imgBgVar }}>
  @use "../assets/styles/config/config" as *;
  
  .group {
    $self: &;
    width: 100%;
    position: relative;
    color: var(--clr-txt);
    background-color: var(--clr-bg);
    z-index: 100;

    &:has(.gallery-modal[aria-hidden="false"]) {
      position: relative;
      z-index: 99999;  
    }
    
    @include media-break-down(l) {
      z-index: 4;
      position: relative;
    }

    &__bg {
      position: absolute;
      inset: 0;
      width: 100%;

      color: var(--clr-bg);

      &::after {
        mix-blend-mode: color;
      }

      &::before {
        color: #4d4d4d;
        opacity: 0.8;
      }

      #{$self}--overlay-none & {
        &::after,
        &::before {
          display: none;
        }
      }

      #{$self}--overlay-dark & {
        color: var(--clr-black);

        &::after {
          opacity: 0.5;
          mix-blend-mode: unset;
        }

        &::before {
          display: none;
        }
      }      

      #{$self}--has-bg-image & {
        height: 100%;
        background-image: var(--img-bg);
        background-size: cover;

        @include media-break-up(l) {
          background-attachment: fixed;
        }
          
      }

      &::after,
      &::before {
        content: "";
        display: block;
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: currentColor;
      }

      img {
        width: 100%;
        height: 100%;
        object-fit: cover;
      }

      video {
        width: 100%;
        height: 100vh;
        position: sticky;
        top: 0;
        object-fit: cover;
      }
    }

    &__content {
      position: relative;
      z-index: 3;

      &:has(> *:not(.spacer):not(.column):not(.columns):not(.column-sticky):first-child:last-child) {
        padding-block: var(--mt-m);
      }
      
    }
  }
</style>
