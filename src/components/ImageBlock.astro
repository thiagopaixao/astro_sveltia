---
import Caption from "./Caption.astro";
import Image from "astro/components/Image.astro";

const { src, wide } = Astro.props;
// src recebe a url direta da imagem
// wide recebe booleano

const hasCaption = Astro.slots.has("default");
---

<figure class:list={["image", { "image--wide": wide }]}>
  <div class="reveal--fadeInUp">
    <Image src={src} alt="" width="100%" height="100%"/>
    {
      hasCaption && (
        <figcaption>
          <Caption><slot /></Caption>
        </figcaption>
      )
    }
  </div>
</figure>

<style lang="scss">
  @use "../assets/styles/config/config" as *;
  @use "../assets/styles/utils/grrr/grrr" as *;

  .image {
    width: 100%;
    &:not(:first-child),
    :global(+ *),
    :global(.animation-disabled >) & {
      margin-top: var(--mt-m);
    }


    :global(.group__content >) & > div {
      @extend %grrr--board;

      img {
        grid-column: content;
      }

      figcaption {
        @include media-break-up(m) {
          grid-column: content;
        }
        
        @include media-break-up(x) {
          grid-column: board-start 2/board-end 11;
        }
      }
    }
    
    :global(.group__content >) &--wide div {
      img {
        grid-column: full;
      }
    }

    &--wide {
      @include media-break-down(m) {
        width: calc(100% + var(--atnl-margin) * 2);
        transform: translateX(calc(-1 * var(--atnl-margin)));

        :global(.caption) {
          padding-inline: var(--atnl-margin);
        }
      }
    }
  }

  :global(.columns:not(.columns--33-66) .columns__column-2 .image--wide) {
    :global(img) {
      @include media-break-up(m) {
        width: calc(100% + var(--atnl-margin));
      }
      
      @include media-break-up(x) {
        width: calc(100% + grrr-cols-size(1, 1) + var(--atnl-margin));
      }
    }
  }

  :global(.columns__column-1 .image--wide > div) {
    @include media-break-up(m) {
      display: flex;
      flex-wrap: wrap;
      justify-content: flex-end;
    }
  }
  
  :global(.columns .image--wide img) {
    @include media-break-up(m) {      
      width: calc(100% + var(--atnl-margin));
    }

    @include media-break-up(x) {
      width: calc(100% + grrr-cols-size(1, 1) + var(--atnl-margin));
    }
  }

  :global(.column .image--wide) {
    display: flex;
    flex-direction: column;
    align-items: center;
    
    &:not(:first-child),
    :global(+ *),
    :global(.animation-disabled >) & {
      margin-top: var(--mt-l);
    }
    
    :global(> div) {
      @include media-break-down(m) {
        width: calc(100% + var(--atnl-margin) * 2);
      }
  
      @include media-break-up(m) {
        width: grrr-cols-size(12);
      }
      
      @include media-break-up(x) {
        width: grrr-cols-size(10);
      }
    }
  }



</style>
